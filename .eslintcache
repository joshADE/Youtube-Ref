[{"C:\\Users\\josh_\\reactapps\\yt-app\\src\\index.js":"1","C:\\Users\\josh_\\reactapps\\yt-app\\src\\App.js":"2","C:\\Users\\josh_\\reactapps\\yt-app\\src\\serviceWorker.js":"3","C:\\Users\\josh_\\reactapps\\yt-app\\src\\app\\store.js":"4","C:\\Users\\josh_\\reactapps\\yt-app\\src\\features\\counter\\Counter.js":"5","C:\\Users\\josh_\\reactapps\\yt-app\\src\\features\\counter\\counterSlice.js":"6","C:\\Users\\josh_\\reactapps\\yt-app\\src\\components\\VidoePlayer.js":"7","C:\\Users\\josh_\\reactapps\\yt-app\\src\\components\\VideoReferencer.js":"8","C:\\Users\\josh_\\reactapps\\yt-app\\src\\utility.js":"9","C:\\Users\\josh_\\reactapps\\yt-app\\src\\components\\VideoSearch.js":"10","C:\\Users\\josh_\\reactapps\\yt-app\\src\\components\\Sidebar.js":"11","C:\\Users\\josh_\\reactapps\\yt-app\\src\\components\\VideoReferences.js":"12","C:\\Users\\josh_\\reactapps\\yt-app\\src\\components\\EditReference.js":"13","C:\\Users\\josh_\\reactapps\\yt-app\\src\\components\\CreateReference.js":"14","C:\\Users\\josh_\\reactapps\\yt-app\\src\\components\\ComponentNavigator.js":"15","C:\\Users\\josh_\\reactapps\\yt-app\\src\\features\\video\\videoSlice.js":"16","C:\\Users\\josh_\\reactapps\\yt-app\\src\\components\\SidebarData.js":"17","C:\\Users\\josh_\\reactapps\\yt-app\\src\\components\\withNavigator.js":"18","C:\\Users\\josh_\\reactapps\\yt-app\\src\\components\\auth\\Login.js":"19","C:\\Users\\josh_\\reactapps\\yt-app\\src\\components\\auth\\Register.js":"20","C:\\Users\\josh_\\reactapps\\yt-app\\src\\components\\auth\\AuthOptions.js":"21","C:\\Users\\josh_\\reactapps\\yt-app\\src\\features\\user\\userSlice.js":"22","C:\\Users\\josh_\\reactapps\\yt-app\\src\\components\\misc\\ErrorNotice.js":"23","C:\\Users\\josh_\\reactapps\\yt-app\\src\\components\\auth\\ProtectedRoute.js":"24","C:\\Users\\josh_\\reactapps\\yt-app\\src\\axios.js":"25","C:\\Users\\josh_\\reactapps\\yt-app\\src\\components\\auth\\ProfileDetails.js":"26","C:\\Users\\josh_\\reactapps\\yt-app\\src\\features\\error\\errorSlice.js":"27","C:\\Users\\josh_\\reactapps\\yt-app\\src\\components\\PlayReference.js":"28","C:\\Users\\josh_\\reactapps\\yt-app\\src\\components\\misc\\VolumeIndicator.js":"29","C:\\Users\\josh_\\reactapps\\yt-app\\src\\components\\CollectionGrouping.js":"30","C:\\Users\\josh_\\reactapps\\yt-app\\src\\features\\collection\\collectionSlice.js":"31","C:\\Users\\josh_\\reactapps\\yt-app\\src\\components\\ManageCollections.js":"32","C:\\Users\\josh_\\reactapps\\yt-app\\src\\components\\misc\\ToggleableColorPicker.js":"33","C:\\Users\\josh_\\reactapps\\yt-app\\src\\components\\CollectionDetail.js":"34"},{"size":692,"mtime":1607540352299,"results":"35","hashOfConfig":"36"},{"size":2124,"mtime":1610203457194,"results":"37","hashOfConfig":"36"},{"size":5141,"mtime":499162500000,"results":"38","hashOfConfig":"36"},{"size":559,"mtime":1610187464456,"results":"39","hashOfConfig":"36"},{"size":1626,"mtime":499162500000,"results":"40","hashOfConfig":"41"},{"size":1551,"mtime":499162500000,"results":"42","hashOfConfig":"36"},{"size":4253,"mtime":1609977651356,"results":"43","hashOfConfig":"36"},{"size":9766,"mtime":1609977834056,"results":"44","hashOfConfig":"36"},{"size":615,"mtime":1610209751419,"results":"45","hashOfConfig":"36"},{"size":819,"mtime":1608925420990,"results":"46","hashOfConfig":"36"},{"size":1398,"mtime":1609869447732,"results":"47","hashOfConfig":"36"},{"size":2609,"mtime":1610330314835,"results":"48","hashOfConfig":"36"},{"size":2214,"mtime":1609409512100,"results":"49","hashOfConfig":"36"},{"size":2703,"mtime":1609467079011,"results":"50","hashOfConfig":"36"},{"size":750,"mtime":1609467032105,"results":"51","hashOfConfig":"36"},{"size":4468,"mtime":1610281417370,"results":"52","hashOfConfig":"36"},{"size":554,"mtime":1609093182239,"results":"53","hashOfConfig":"36"},{"size":866,"mtime":1608925364207,"results":"54","hashOfConfig":"36"},{"size":2613,"mtime":1609869289483,"results":"55","hashOfConfig":"36"},{"size":4212,"mtime":1609869325004,"results":"56","hashOfConfig":"36"},{"size":1236,"mtime":1609850520234,"results":"57","hashOfConfig":"36"},{"size":3734,"mtime":1609476966300,"results":"58","hashOfConfig":"36"},{"size":270,"mtime":1609134410128,"results":"59","hashOfConfig":"36"},{"size":548,"mtime":1609463460760,"results":"60","hashOfConfig":"36"},{"size":147,"mtime":1610389985726,"results":"61","hashOfConfig":"36"},{"size":751,"mtime":1609463962730,"results":"62","hashOfConfig":"36"},{"size":697,"mtime":1609458082549,"results":"63","hashOfConfig":"36"},{"size":1086,"mtime":1609779653654,"results":"64","hashOfConfig":"36"},{"size":580,"mtime":1609971674342,"results":"65","hashOfConfig":"36"},{"size":5293,"mtime":1610329879180,"results":"66","hashOfConfig":"36"},{"size":5625,"mtime":1610302051108,"results":"67","hashOfConfig":"36"},{"size":1971,"mtime":1610330003344,"results":"68","hashOfConfig":"36"},{"size":1738,"mtime":1610243880279,"results":"69","hashOfConfig":"36"},{"size":3374,"mtime":1610245429918,"results":"70","hashOfConfig":"36"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},"1l2lz7a",{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"73"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"7l24th",{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"73"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"73"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"73"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"73"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"73"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"73"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"73"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"73"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"73"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"73"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},"C:\\Users\\josh_\\reactapps\\yt-app\\src\\index.js",[],["151","152"],"C:\\Users\\josh_\\reactapps\\yt-app\\src\\App.js",["153"],"import React, { useEffect, useState } from 'react';\r\nimport {  useDispatch } from 'react-redux';\r\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport ProtectedRoute from './components/auth/ProtectedRoute';\r\nimport './App.css';\r\nimport Sidebar from './components/Sidebar';\r\nimport VideoReferences from './components/VideoReferences';\r\nimport EditReference from './components/EditReference';\r\nimport CreateReference from './components/CreateReference';\r\nimport Login from './components/auth/Login';\r\nimport Register from './components/auth/Register';\r\nimport AuthOptions from './components/auth/AuthOptions';\r\nimport { loadUser } from './features/user/userSlice';\r\nimport PlayReference from './components/PlayReference';\r\nimport ManageCollections from './components/ManageCollections';\r\nconst App = () => {\r\n\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n      dispatch(loadUser());\r\n  }, [])\r\n\r\n  const [sideBarOpen, setSideBarOpen] = useState(false);\r\n  const getClasses = () => {\r\n    if (sideBarOpen)\r\n        return \"App open\";\r\n    else \r\n        return \"App\"; \r\n  }\r\n  return (\r\n    <Router>\r\n      <div className={getClasses()}>\r\n        \r\n        <Sidebar setSideBarOpen={setSideBarOpen} />\r\n          <div className=\"routes\">\r\n            <div className=\"inner\">\r\n              <Switch>\r\n                <ProtectedRoute exact path=\"/\" component={VideoReferences} />\r\n                <ProtectedRoute path=\"/edit/:id\" component={EditReference} />\r\n                <ProtectedRoute path=\"/create\" component={CreateReference} />\r\n                <ProtectedRoute path=\"/play/:id\" component={PlayReference} />\r\n                <ProtectedRoute path=\"/collections\" component={ManageCollections} />\r\n                <Route path=\"/login\" component={Login} />\r\n                <Route path=\"/register\" component={Register} />\r\n                <Route path=\"*\" component={() => \"Page Not Found\"} />\r\n              </Switch>\r\n            </div>\r\n          </div>\r\n          <AuthOptions setSideBarOpen={setSideBarOpen}/>\r\n        </div>\r\n      \r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\josh_\\reactapps\\yt-app\\src\\serviceWorker.js",[],"C:\\Users\\josh_\\reactapps\\yt-app\\src\\app\\store.js",[],"C:\\Users\\josh_\\reactapps\\yt-app\\src\\features\\counter\\Counter.js",[],"C:\\Users\\josh_\\reactapps\\yt-app\\src\\features\\counter\\counterSlice.js",[],"C:\\Users\\josh_\\reactapps\\yt-app\\src\\components\\VidoePlayer.js",["154"],"import React, { useState, useEffect, useRef } from 'react'\r\nimport Slide from 'rc-slider';\r\nimport 'rc-slider/assets/index.css';\r\nimport { CustomInput, Button } from 'reactstrap';\r\nimport ReactPlayer from 'react-player';\r\nimport { getTime } from '../utility';\r\nimport VolumeIndicator from './misc/VolumeIndicator';\r\nconst { createSliderWithTooltip } = Slide;\r\nconst Slider = createSliderWithTooltip(Slide);\r\n\r\nfunction VideoPlayer({\r\n    video,\r\n    handleVideoEnd,\r\n    nextButtonText,\r\n    nextButtonHandler\r\n}) {\r\n    const [isPaused, setPaused ] = useState(false);\r\n    const [volume, setVolume] = useState(0.5);\r\n    const [repeat, setRepeat] = useState(false);\r\n    const [value, setValue] = useState(video.startSeconds);\r\n    const videoRef = useRef();\r\n\r\n    const [videoDuration, setVideoDuration] = useState(60);\r\n\r\n    useEffect(() => {\r\n        if (videoRef.current){\r\n            setVideoDuration(videoRef.current.getDuration());\r\n        }\r\n    })\r\n    \r\n\r\n\r\n    const handleVolumeChange = (newvolume) => {\r\n        setVolume(newvolume);\r\n        \r\n    }\r\n    const handlePlaying = (e) => { \r\n        setPaused(false);  \r\n        \r\n    }\r\n    const handlePause = (e) => {\r\n        setPaused(true);\r\n        \r\n    }\r\n    const handleEnd = () => {\r\n        if (repeat){\r\n            if (videoRef.current){\r\n                videoRef.current.seekTo(video.startSeconds);\r\n                setValue(video.startSeconds);\r\n            }\r\n        }else{\r\n            handleVideoEnd();\r\n        }\r\n    }\r\n\r\n    const handleSliderChange = (newvalue) => {\r\n        setValue(newvalue);\r\n        if (videoRef.current){\r\n            videoRef.current.seekTo(newvalue);\r\n        }\r\n    }\r\n\r\n    const handleProgress = (state) => {\r\n        setValue(state.playedSeconds);\r\n    }\r\n\r\n    return (\r\n        <div className=\"player\">\r\n            <ReactPlayer\r\n                className=\"video\" \r\n                url={video.url}\r\n                width=\"100%\"\r\n                height=\"100%\"\r\n                controls={false}\r\n                playing={!isPaused}\r\n                config={{\r\n                    youtube: video.endSeconds\r\n                    ? { playerVars: { start: video.startSeconds, end: video.endSeconds } } \r\n                    : { playerVars: { start: video.startSeconds } },\r\n                }}\r\n                onProgress={handleProgress}\r\n                volume={volume}\r\n                onPlay={handlePlaying}\r\n                onPause={handlePause}\r\n                onEnded={handleEnd}\r\n                ref={videoRef}\r\n            />\r\n            <div\r\n                className=\"track\"\r\n            >\r\n            <span\r\n                className=\"\"\r\n            >{getTime(value)}</span>\r\n            \r\n            <Slider \r\n                min={video.startSeconds}\r\n                max={video.endSeconds?video.endSeconds:videoDuration}\r\n                value={value}\r\n                onChange={handleSliderChange}\r\n                tipFormatter={val => getTime(val)}\r\n            />\r\n            </div>\r\n            <div \r\n                className=\"controls\"\r\n            >\r\n                <CustomInput \r\n                    type=\"switch\" \r\n                    id=\"pauseSwitch\" \r\n                    label=\"Pause\" \r\n                    checked={isPaused}\r\n                    onChange={() => setPaused(!isPaused)}\r\n                />\r\n                <CustomInput \r\n                    type=\"switch\" \r\n                    id=\"repeatSwitch\" \r\n                    label=\"Repeat after video ends\" \r\n                    checked={repeat}\r\n                    onChange={() => setRepeat(!repeat)}\r\n                />\r\n                <VolumeIndicator \r\n                    min={0}\r\n                    max={1}\r\n                    value={volume}\r\n                />\r\n                <Slider \r\n                    className=\"volumeSlider\"\r\n                    min={0}\r\n                    max={1}\r\n                    value={volume}\r\n                    step={0.1}\r\n                    onChange={handleVolumeChange}\r\n                />\r\n                <br />\r\n                <Button onClick={nextButtonHandler} outline color=\"secondary\">{nextButtonText}</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default VideoPlayer\r\n","C:\\Users\\josh_\\reactapps\\yt-app\\src\\components\\VideoReferencer.js",["155","156"],"import React, { useState, useEffect, useRef } from 'react'\r\nimport Slider from 'rc-slider';\r\nimport 'rc-slider/assets/index.css';\r\nimport { CustomInput, Form, FormGroup, Label, Input, Col, Button } from 'reactstrap';\r\nimport ReactPlayer from 'react-player';\r\nimport { getTime, clamp } from '../utility'\r\nimport VolumeIndicator from './misc/VolumeIndicator';\r\nconst { createSliderWithTooltip } = Slider;\r\nconst Range = createSliderWithTooltip(Slider.Range);\r\n\r\n\r\n\r\n\r\nfunction VideoReferencer({\r\n    video,\r\n    setNewReference,\r\n    handleVideoEnd,\r\n    nextButtonText,\r\n    nextButtonHandler\r\n}) {\r\n    const [isPaused, setPaused ] = useState(false);\r\n    const [volume, setVolume] = useState(0.5);\r\n    const [repeat, setRepeat] = useState(false);\r\n    const videoRef = useRef();\r\n    const [referenceType, setReferenceType] = useState(video.endSeconds?'range':'point');\r\n    const [referenceName, setReferenceName] = useState(video.name?video.name:'');\r\n\r\n    const [startPoint, setStartPoint] = useState(video.startSeconds ? video.startSeconds : 0);\r\n    \r\n    const [value, setValue] = useState(startPoint);\r\n    const [videoDuration, setVideoDuration] = useState(60);\r\n    const [endPoint, setEndPoint] = useState(video.endSeconds ? video.endSeconds : 40);\r\n\r\n    useEffect(() => {\r\n        if (videoRef.current){\r\n            setVideoDuration(videoRef.current.getDuration());\r\n            setEndPoint(clamp(endPoint, value, videoRef.current.getDuration()));\r\n        }\r\n    })\r\n\r\n    useEffect(() => {\r\n        console.log(\"start seconds\", video.startSeconds);\r\n        console.log(\"end seconds\", video.endSeconds);\r\n        console.log(\"start point\", startPoint);\r\n        console.log(\"end point\", endPoint);\r\n        \r\n    }, [endPoint])\r\n    \r\n    \r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (referenceType === 'point'){\r\n            setNewReference(referenceName, Math.floor(startPoint));\r\n        }else if (referenceType === 'range'){\r\n            setNewReference(referenceName, Math.floor(startPoint), Math.floor(endPoint));\r\n        }else{\r\n            return;\r\n        }\r\n        nextButtonHandler();\r\n    }\r\n   \r\n\r\n    const handleVolumeChange = (newvolume) => {\r\n        setVolume(newvolume);\r\n        \r\n    }\r\n    const handlePlaying = (e) => { \r\n        setPaused(false);  \r\n        \r\n    }\r\n    const handlePause = (e) => {\r\n        setPaused(true);\r\n        \r\n    }\r\n\r\n    const handleReady = () => {\r\n        if (videoRef.current){\r\n            videoRef.current.seekTo(startPoint);\r\n            setValue(startPoint);\r\n        }\r\n        if (video.endSeconds){\r\n            setEndPoint(video.endSeconds);\r\n        }\r\n    }\r\n    \r\n    const handleEnd = () => {\r\n        if (repeat){\r\n            if (videoRef.current){\r\n                videoRef.current.seekTo(startPoint);\r\n                setValue(startPoint);\r\n            }\r\n        }else{\r\n            handleVideoEnd();\r\n        }\r\n    }\r\n\r\n    const handleSliderChange = (newvalue) => {\r\n        if (newvalue[0]){\r\n            setStartPoint(newvalue[0]);\r\n        }\r\n        if (newvalue[1]){\r\n            setValue(newvalue[1]);\r\n        }\r\n        if (newvalue[2]){\r\n            setEndPoint(newvalue[2]);\r\n        }\r\n        console.log(newvalue)\r\n        if (videoRef.current){\r\n            videoRef.current.seekTo(newvalue[1]);\r\n        }\r\n        //setPaused(false);\r\n    }\r\n\r\n    const handleProgress = (state) => {\r\n        setValue(state.playedSeconds);\r\n\r\n        // the range input doesn't support overlapping of handles (so endpoint - 1)\r\n        if (referenceType === 'range' && state.playedSeconds >= endPoint - 1){ \r\n            if (videoRef.current){\r\n                setPaused(true);\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleTypeChange = (e) => {\r\n        setReferenceType(e.target.value);\r\n        if (e.target.value === 'range'){\r\n            setEndPoint(value + videoDuration / 10); // endPoint is clamped above\r\n        }\r\n    }\r\n\r\n    return (\r\n\r\n        <div className=\"player\">\r\n            <ReactPlayer\r\n                className=\"video\" \r\n                url={video.url}\r\n                width=\"100%\"\r\n                height=\"100%\"\r\n                controls={false}\r\n                playing={!isPaused}\r\n                onProgress={handleProgress}\r\n                volume={volume}\r\n                onPlay={handlePlaying}\r\n                onPause={handlePause}\r\n                onEnded={handleEnd}\r\n                onReady={handleReady}\r\n                ref={videoRef}\r\n            />\r\n            <div\r\n                className=\"track\"\r\n            >\r\n            <span\r\n                className=\"\"\r\n            >{getTime(value)}</span>\r\n            {' '} | {' '}\r\n            <span\r\n                className=\"\"\r\n            >{referenceName}</span>\r\n            <Range\r\n                min={0}\r\n                max={videoDuration}\r\n                value={(referenceType==='range')?[startPoint, value, endPoint]:[startPoint, value]}\r\n                onChange={handleSliderChange}\r\n                count={(referenceType==='range')?3:2}\r\n                pushable={true}\r\n                allowCross={true}\r\n                tipFormatter={val => getTime(val)}\r\n                handleStyle={[{}, {backgroundColor: 'paleturquoise'}]}\r\n            \r\n            />\r\n            </div>\r\n            <div \r\n                className=\"controls\"\r\n            >\r\n                <Form\r\n                    onSubmit={handleSubmit}\r\n                >\r\n                    <CustomInput \r\n                        type=\"switch\" \r\n                        id=\"pauseSwitchReferencer\"\r\n                        label=\"Pause\" \r\n                        checked={isPaused}\r\n                        onChange={() => setPaused(!isPaused)}\r\n                    />\r\n                    <CustomInput \r\n                        type=\"switch\"  \r\n                        label=\"Repeat after video ends\"\r\n                        id=\"repeatSwitchReferencer\" \r\n                        checked={repeat}\r\n                        onChange={() => setRepeat(!repeat)}\r\n                    />\r\n                    <FormGroup check>\r\n                        <VolumeIndicator \r\n                            min={0}\r\n                            max={1}\r\n                            value={volume}\r\n                        />\r\n                        <Slider \r\n                            className=\"volumeSlider\"\r\n                            min={0}\r\n                            max={1}\r\n                            value={volume}\r\n                            step={0.1}\r\n                            onChange={handleVolumeChange}\r\n                        />\r\n                    </FormGroup>\r\n                    <br />\r\n                    <FormGroup check>\r\n                        <Label check>\r\n                            <Input onChange={handleTypeChange} value=\"point\" checked={referenceType === 'point'} type=\"radio\" name=\"referenceType\" />{' '}\r\n                            Reference Point\r\n                        </Label>\r\n                    </FormGroup>\r\n                    <br />\r\n                    <FormGroup check>\r\n                        <Label check>\r\n                            <Input onChange={handleTypeChange} value=\"range\" checked={referenceType === 'range'} type=\"radio\" name=\"referenceType\" />{' '}\r\n                            Reference Range\r\n                        </Label>\r\n                    </FormGroup>\r\n                    <br />\r\n                    <FormGroup row>\r\n                        <Label for=\"referenceName\" sm={2}>Name</Label>\r\n                        <Col sm={10}>\r\n                            <Input type=\"text\" name=\"referenceName\" value={referenceName} onChange={(e) => setReferenceName(e.target.value)} id=\"referenceName\" placeholder=\"Enter the reference name here\" required/>\r\n                        </Col>\r\n                    </FormGroup>\r\n                    <FormGroup row style={{ maxWidth: '450px'}}>\r\n                        <Col sm={2}>\r\n                            SP: {getTime(startPoint)}\r\n                        </Col>\r\n                        <Col style={{ maxWidth: '200px'}} sm={5}>\r\n                            <Button onClick={() => setStartPoint(value)} outline color=\"secondary\">Set start point to current played point</Button>\r\n                        </Col>\r\n                        <Col style={{ maxWidth: '200px'}} sm={5}>\r\n                            <Button onClick={() => setStartPoint(0)} outline color=\"secondary\">Set start point to beginning</Button>\r\n                        </Col>\r\n                    </FormGroup>\r\n                    {referenceType === 'range' &&\r\n                    <FormGroup row style={{ maxWidth: '450px'}}>\r\n                        <Col sm={2}>\r\n                            EP: {getTime(endPoint)}\r\n                        </Col>\r\n                        <Col style={{ maxWidth: '200px'}} sm={5}>\r\n                            <Button onClick={() => setEndPoint(value)} outline color=\"secondary\">Set end point to current played point</Button>\r\n                        </Col>\r\n                        <Col style={{ maxWidth: '200px'}} sm={5}>\r\n                            <Button onClick={() => setEndPoint(videoDuration)} outline color=\"secondary\">Set end point to end</Button>\r\n                        </Col>\r\n                    </FormGroup>\r\n                    }\r\n\r\n                    \r\n                    \r\n                    <FormGroup check row>\r\n                        <Col sm={{ size: 5, offset: 2 }}>\r\n                        <Input type=\"submit\" value={nextButtonText}/>\r\n                        </Col>\r\n                    </FormGroup>\r\n                </Form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default VideoReferencer","C:\\Users\\josh_\\reactapps\\yt-app\\src\\utility.js",[],"C:\\Users\\josh_\\reactapps\\yt-app\\src\\components\\VideoSearch.js",[],"C:\\Users\\josh_\\reactapps\\yt-app\\src\\components\\Sidebar.js",[],"C:\\Users\\josh_\\reactapps\\yt-app\\src\\components\\VideoReferences.js",["157"],"import React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Spinner } from 'reactstrap';\r\nimport { DragDropContext } from 'react-beautiful-dnd';\r\n\r\n\r\nimport {\r\n\r\n    selectVideoData,\r\n    getAllUserVideosAsync,\r\n\r\n} from '../features/video/videoSlice'\r\nimport CollectionGrouping from './CollectionGrouping';\r\nimport { \r\n    selectCollectionData, \r\n    getAllUserCollectionsFullAsync,\r\n    moveVideoAsync,\r\n    \r\n} from '../features/collection/collectionSlice';\r\nfunction VideoReferences() {\r\n    const { isLoading: isVideoLoading } = useSelector(selectVideoData);\r\n    const { isLoading: isCollectionLoading, collections } = useSelector(selectCollectionData);\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(getAllUserVideosAsync());\r\n        dispatch(getAllUserCollectionsFullAsync());\r\n    }, [])\r\n\r\n    const handleDragEnd = (param) => {\r\n        //console.log(param);\r\n        const { source, destination, draggableId } = param;\r\n        if (!destination){\r\n            return;\r\n        }\r\n        let { droppableId: fromCollection, index: fromIndex } = source;\r\n        let { droppableId: toCollection, index: toIndex } = destination;\r\n\r\n        if (fromCollection === 'null'){\r\n            fromCollection = null;\r\n        } \r\n        if (toCollection === 'null'){\r\n            toCollection = null;\r\n        }\r\n        let payload = {\r\n            fromCollection,\r\n            fromIndex,\r\n            toCollection,\r\n            toIndex\r\n        }\r\n\r\n        //console.log(fromCollection, toCollection, draggableId);\r\n\r\n        dispatch(moveVideoAsync(draggableId, payload));\r\n\r\n        // payload = {\r\n        //     ...payload,\r\n        //     videoId: draggableId\r\n        // }\r\n        // dispatch(moveVideo(payload));\r\n        // dispatch(moveVideoInCollection(payload));\r\n    }\r\n\r\n    return (\r\n        <div className=\"text-center\">\r\n            <h2>Video References</h2>\r\n            <DragDropContext\r\n                onDragEnd={handleDragEnd}\r\n            >\r\n            {collections.map(collection => (\r\n                (collection.videos &&\r\n                <CollectionGrouping \r\n                    key={collection.id}\r\n                    collection={collection}\r\n                    videos={collection.videos}\r\n                    //videos.filter(vid => vid.collectionId === collection.id)\r\n                />)\r\n            ))}\r\n            </DragDropContext>\r\n            {(isCollectionLoading || isVideoLoading) && <Spinner color=\"secondary\" />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default VideoReferences\r\n","C:\\Users\\josh_\\reactapps\\yt-app\\src\\components\\EditReference.js",[],"C:\\Users\\josh_\\reactapps\\yt-app\\src\\components\\CreateReference.js",[],"C:\\Users\\josh_\\reactapps\\yt-app\\src\\components\\ComponentNavigator.js",[],"C:\\Users\\josh_\\reactapps\\yt-app\\src\\features\\video\\videoSlice.js",["158","159"],"import { createSlice } from '@reduxjs/toolkit';\r\nimport axios from '../../axios';\r\nimport { getTokenFromUserReducer } from '../user/userSlice';\r\nimport { getErrors } from '../error/errorSlice';\r\nexport const videoSlice = createSlice({\r\n    name: 'video',\r\n    initialState: {\r\n      videos: [],\r\n      isLoading: false,\r\n    },\r\n    reducers: {\r\n      add: (state, action) => {\r\n        state.videos.push(action.payload);\r\n      },\r\n      replaceAllVideos: (state, action) => {\r\n        state.videos = action.payload;\r\n        state.isLoading = false;\r\n      },\r\n      removeVideo: (state, action) => {\r\n        state.videos = state.videos.filter(vid => vid.id !== action.payload.id);\r\n      },\r\n      editVideo: (state, action) => {\r\n        state.videos = state.videos.map(vid => {\r\n          if (vid.id === action.payload.id)\r\n            return action.payload;\r\n          else\r\n            return vid;\r\n        });\r\n      },\r\n      startLoading: state => {\r\n        state.isLoading = true;\r\n      },\r\n      moveVideo: (state, { payload }) => {\r\n        const { fromCollection, fromIndex, toCollection, toIndex, videoId } = payload;\r\n        const indexInUnalteredState = state.videos.findIndex(video => video.id === videoId);\r\n        if (indexInUnalteredState > -1){\r\n          state.videos[indexInUnalteredState].collectionId = toCollection;\r\n  \r\n          const videosInToCollection = state.videos.filter(video => video.collectionId === toCollection);\r\n          const videosNotInToCollection = state.videos.filter(video => video.collectionId !== toCollection);\r\n          //newCourses[params.termI].splice(params.courseI, 0, newCourses[currentItem.termI].splice(currentItem.courseI, 1)[0]);\r\n          const index = videosInToCollection.findIndex(video => video.id === videoId);\r\n\r\n          videosInToCollection.splice(toIndex, 0, videosInToCollection.splice(index, 1)[0]);\r\n          state.videos = [...videosInToCollection, ...videosNotInToCollection];\r\n        }\r\n      }\r\n    },\r\n  });\r\n\r\n\r\n  export const { add, replaceAllVideos, removeVideo, editVideo, startLoading, moveVideo } = videoSlice.actions;\r\n\r\n  const headers = (token) => ({\r\n    headers: {\"x-auth-token\": token }\r\n  })\r\n\r\n  export const addVideoAsync = video => async (dispatch, getState) => {\r\n      try{\r\n          const savedVideo = await axios.post(\r\n            '/videos/add',\r\n            video,\r\n            headers(getTokenFromUserReducer(getState))\r\n          ); \r\n        dispatch(add(savedVideo.data));\r\n      }catch (err) {\r\n        console.log(err);\r\n        if(err.response){\r\n          dispatch(getErrors({\r\n            msg: err.response.data,\r\n            status: err.response.status,\r\n            id: null\r\n          }));\r\n        }\r\n      }\r\n  }\r\n\r\n  export const getAllUserVideosAsync = () => async (dispatch, getState) => {\r\n    try{\r\n      dispatch(startLoading());\r\n      const userVideos = await axios.get(\r\n        '/videos/uservideos',\r\n        headers(getTokenFromUserReducer(getState))\r\n      ); \r\n      dispatch(replaceAllVideos(userVideos.data));\r\n    }catch (err) {\r\n      console.log(err);\r\n      if(err.response){\r\n        dispatch(getErrors({\r\n          msg: err.response.data,\r\n          status: err.response.status,\r\n          id: null\r\n        }));\r\n      }\r\n    }\r\n  }\r\n\r\n  export const editVideoAsync = (videoId, editedVideo) => async (dispatch, getState) => {\r\n    try{\r\n      const updatedVideo = await axios.put(\r\n        '/videos/edit/' + videoId,\r\n        editedVideo,\r\n        headers(getTokenFromUserReducer(getState))\r\n      ); \r\n      dispatch(editVideo(updatedVideo.data));\r\n    }catch (err) {\r\n      console.log(err);\r\n      if(err.response){\r\n        dispatch(getErrors({\r\n          msg: err.response.data,\r\n          status: err.response.status,\r\n          id: null\r\n        }));\r\n      }\r\n    }\r\n  }\r\n\r\nexport const deleteVideoAsync = (videoId) => async (dispatch, getState) => {\r\n  try{\r\n    const updatedVideo = await axios.delete(\r\n      '/videos/delete/' + videoId,\r\n      headers(getTokenFromUserReducer(getState))\r\n    ); \r\n    dispatch(removeVideo(updatedVideo.data));\r\n  }catch (err) {\r\n    console.log(err);\r\n    if(err.response){\r\n      dispatch(getErrors({\r\n        msg: err.response.data,\r\n        status: err.response.status,\r\n        id: null\r\n      }));\r\n    }\r\n  }\r\n}\r\n\r\n  export const selectVideos = state => state.video.videos;\r\n  export const selectVideoData = state => state.video;\r\n  export default videoSlice.reducer;","C:\\Users\\josh_\\reactapps\\yt-app\\src\\components\\SidebarData.js",[],"C:\\Users\\josh_\\reactapps\\yt-app\\src\\components\\withNavigator.js",[],"C:\\Users\\josh_\\reactapps\\yt-app\\src\\components\\auth\\Login.js",["160","161","162"],"import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Spinner } from 'reactstrap';\r\nimport { login, selectAllUserData } from '../../features/user/userSlice';\r\nimport { selectAllErrorData, clearErrors } from '../../features/error/errorSlice';\r\n\r\nimport ErrorNotice from '../misc/ErrorNotice';\r\nimport AuthOptions from './AuthOptions';\r\nfunction Login() {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const { isAuthenticated, isLoading } = useSelector(selectAllUserData);\r\n    const { msg, status, id} = useSelector(selectAllErrorData);\r\n\r\n\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [message, setMessage] = useState('');\r\n\r\n    const [error, setError] = useState({\r\n        email: '',\r\n        password: ''\r\n    });\r\n\r\n    useEffect(() => {\r\n        if(id === 'LOGIN_FAIL'){\r\n           setError(msg.errors); \r\n        }else{\r\n            setError({\r\n                email: '',\r\n                password: ''\r\n            });\r\n        }\r\n        if(isAuthenticated){\r\n            history.push('/');\r\n        }\r\n        \r\n    },[msg, status, id, isAuthenticated]);\r\n\r\n    useEffect(() => {\r\n        return dispatch(clearErrors());\r\n    },[])\r\n        const submit = (e) => {\r\n            e.preventDefault();\r\n            setMessage('');\r\n            \r\n            \r\n            const loginUser = { email, password };\r\n            dispatch(login(loginUser));\r\n        }\r\n    return (\r\n       <div className=\"page\">\r\n            <h2>Log In</h2>\r\n            {isLoading && <Spinner color=\"secondary\" />}\r\n            <form className=\"form\" onSubmit={submit}>\r\n                <span className=\"error\">{message}</span>\r\n                <label htmlFor=\"login-email\">Email</label>\r\n                <input id=\"login-email\" type=\"email\" onChange={(e) => setEmail(e.target.value)} value={email} />\r\n                {error.email && (<ErrorNotice message={error.email} clearError={() => setError({...error, email: undefined})} />)}\r\n\r\n\r\n                <label htmlFor=\"login-password\">Password</label>\r\n                <input id=\"login-password\" type=\"password\" onChange={(e) => setPassword(e.target.value)} value={password} />\r\n                {error.password && (<ErrorNotice message={error.password} clearError={() => setError({...error, password: undefined})} />)}\r\n\r\n                <input type=\"submit\" value=\"Log in\" />\r\n\r\n                \r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","C:\\Users\\josh_\\reactapps\\yt-app\\src\\components\\auth\\Register.js",["163","164"],"import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { selectAllUserData, register } from '../../features/user/userSlice';\r\nimport { selectAllErrorData, clearErrors } from '../../features/error/errorSlice';\r\nimport ErrorNotice from '../misc/ErrorNotice';\r\nfunction Register() {\r\n    const { isAuthenticated } = useSelector(selectAllUserData);\r\n    const { msg, status, id} = useSelector(selectAllErrorData);\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [passwordConfirm, setPasswordConfirm] = useState('');\r\n    const [firstname, setFirstName] = useState('');\r\n    const [lastname, setLastName] = useState('');\r\n    const [username, setUserName] = useState('');\r\n    const [message, setMessage] = useState('');\r\n    const [error, setError] = useState({\r\n        email: '',\r\n        password: '',\r\n        firstname: '',\r\n        lastname: '',\r\n        username: ''\r\n    });\r\n\r\n    useEffect(() => {\r\n        if(id === 'REGISTER_FAIL'){\r\n           setError(msg.errors); \r\n        }else{\r\n            setError({\r\n                email: '',\r\n                password: '',\r\n                firstname: '',\r\n                lastname: '',\r\n                username: ''\r\n            });\r\n        }\r\n        if(isAuthenticated){\r\n            history.push('/');\r\n        }\r\n    },[msg, status, id, isAuthenticated]);\r\n\r\n    useEffect(() => {\r\n        return dispatch(clearErrors());\r\n    },[])\r\n    \r\n    const submit = async (e) => {\r\n        e.preventDefault();\r\n        setMessage('');\r\n        \r\n        if (password !== passwordConfirm){\r\n            setMessage('Passwords do not match');\r\n            return;\r\n        }\r\n\r\n        const newUser = { email, password, firstname, lastname, username};\r\n        dispatch(register(newUser))\r\n    }\r\n    \r\n    return (\r\n        <div className=\"page\">\r\n            <h2>Register</h2>\r\n            <form className=\"form\" onSubmit={submit}>\r\n                {message && (<ErrorNotice message={message} clearError={() => setMessage(undefined)} />)}\r\n                <label htmlFor=\"register-email\">Email</label>\r\n                <input id=\"register-email\" type=\"email\" onChange={(e) => setEmail(e.target.value)} value={email} />\r\n                {error.email && (<ErrorNotice message={error.email} clearError={() => setError({...error, email: undefined})} />)}\r\n\r\n                <label htmlFor=\"register-password\">Password</label>\r\n                <input id=\"register-password\" type=\"password\" onChange={(e) => setPassword(e.target.value)} value={password} />\r\n                <input type=\"password\" placeholder=\"Reenter password\" onChange={(e) => setPasswordConfirm(e.target.value)} value={passwordConfirm} />\r\n                {error.password && (<ErrorNotice message={error.password} clearError={() => setError({...error, password: undefined})} />)}\r\n\r\n                <label htmlFor=\"register-firstname\">First Name</label>\r\n                <input id=\"register-firstname\" type=\"text\" onChange={(e) => setFirstName(e.target.value)} value={firstname} />\r\n                {error.firstname && (<ErrorNotice message={error.firstname} clearError={() => setError({...error, firstname: undefined})} />)}\r\n\r\n                <label htmlFor=\"register-lastname\">Last Name</label>\r\n                <input id=\"register-lastname\" type=\"text\" onChange={(e) => setLastName(e.target.value)} value={lastname} />\r\n                {error.lastname && (<ErrorNotice message={error.lastname} clearError={() => setError({...error, lastname: undefined})} />)}\r\n\r\n                <label htmlFor=\"register-username\">Username</label>\r\n                <input id=\"register-username\" type=\"text\" onChange={(e) => setUserName(e.target.value)} value={username} />\r\n                {error.username && (<ErrorNotice message={error.username} clearError={() => setError({...error, username: undefined})} />)}\r\n\r\n                <input type=\"submit\" value=\"Register\" />\r\n\r\n                \r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Register\r\n","C:\\Users\\josh_\\reactapps\\yt-app\\src\\components\\auth\\AuthOptions.js",[],"C:\\Users\\josh_\\reactapps\\yt-app\\src\\features\\user\\userSlice.js",["165","166"],"import { createSlice } from '@reduxjs/toolkit';\r\nimport axios from '../../axios';\r\nimport { getErrors, clearErrors } from '../error/errorSlice';\r\nfunction loggedIn (state, { payload }){\r\n  localStorage.setItem('auth-token', payload.token)\r\n  //state = {...state, ...payload};\r\n  state.token = payload.token;\r\n  state.isAuthenticated = true;\r\n  state.isLoading = false;\r\n  state.user = payload.user;\r\n}\r\n\r\nfunction loggedOut (state){\r\n  localStorage.removeItem('auth-token');\r\n  state.token = null;\r\n  state.user = null;\r\n  state.isAuthenticated = false;\r\n  state.isLoading = false;\r\n}\r\n\r\n\r\nexport const userSlice = createSlice({\r\n    name: 'user',\r\n    initialState: {\r\n        userData: {\r\n            token: undefined,\r\n            user: undefined  \r\n        },\r\n        isAuthenticated: null,\r\n        isLoading: false,\r\n        user: null,\r\n        token: localStorage.getItem('auth-token')\r\n    },\r\n    reducers: {\r\n      changeUser: (state, { payload }) => {\r\n        state.userData.token = payload.token;\r\n        state.userData.user = payload.user;\r\n      },\r\n      userLoading: state => {\r\n        state.isLoading = true;\r\n      },\r\n      userLoaded: (state, { payload }) => {\r\n        state.isAuthenticated = true;\r\n        state.isLoading = false;\r\n        state.user = payload;\r\n      },\r\n      loginSuccess: loggedIn,\r\n      registerSuccess: loggedIn,\r\n      authError: loggedOut,\r\n      loginFail: loggedOut,\r\n      logoutSuccess: loggedOut,\r\n      registerFail: loggedOut\r\n    },\r\n  });\r\n\r\n\r\n  export const {  userLoading, userLoaded, loginSuccess, registerSuccess, authError, loginFail, logoutSuccess, registerFail } = userSlice.actions;\r\n\r\n  export const getTokenFromUserReducer = getState => getState().user.token; \r\n\r\n  const headers = (token) => ({\r\n    headers: {\"x-auth-token\": token }\r\n  })\r\n\r\n  export const loadUser = () => async (dispatch, getState) => {\r\n    try{\r\n      dispatch(userLoading());\r\n\r\n      const token = getTokenFromUserReducer(getState);\r\n\r\n      const userRes = await axios.get(\r\n        '/users/', \r\n        headers(token)\r\n      );\r\n      dispatch(userLoaded(userRes.data));\r\n\r\n\r\n    }catch(err){\r\n      console.log(err);\r\n      if(err.response){\r\n        dispatch(getErrors({\r\n          msg: err.response.data,\r\n          status: err.response.status,\r\n          id: null\r\n        }));\r\n      }\r\n      dispatch(authError());\r\n    }\r\n  }\r\n\r\n  export const register = (newUser) => async dispatch => {\r\n    try{\r\n      \r\n      const registerRes = await axios.post(\r\n        '/users/register',\r\n        newUser\r\n      );\r\n\r\n      const loginRes = await axios.post(\r\n        '/users/login',\r\n        {\r\n          email: newUser.email,\r\n          password: newUser.password,\r\n        }\r\n      );\r\n\r\n      dispatch(registerSuccess(loginRes.data));\r\n    }catch(err){\r\n      console.log(err);\r\n      if(err.response){\r\n        dispatch(getErrors({\r\n          msg: err.response.data,\r\n          status: err.response.status,\r\n          id: 'REGISTER_FAIL'\r\n        }));\r\n      }\r\n      dispatch(registerFail());\r\n    }\r\n  }\r\n\r\n  export const login = returningUser => async dispatch => {\r\n    try{\r\n      \r\n      const loginRes = await axios.post(\r\n        '/users/login',\r\n        {\r\n          email: returningUser.email,\r\n          password: returningUser.password,\r\n        }\r\n      );\r\n\r\n      dispatch(loginSuccess(loginRes.data));\r\n    }catch(err){\r\n      console.log(err);\r\n      if(err.response){\r\n        dispatch(getErrors({\r\n          msg: err.response.data,\r\n          status: err.response.status,\r\n          id: 'LOGIN_FAIL'\r\n        }));\r\n      }\r\n      dispatch(loginFail());\r\n    }\r\n  }\r\n\r\n  export const selectAllUserData = state => state.user;\r\n\r\n  export default userSlice.reducer;","C:\\Users\\josh_\\reactapps\\yt-app\\src\\components\\misc\\ErrorNotice.js",[],"C:\\Users\\josh_\\reactapps\\yt-app\\src\\components\\auth\\ProtectedRoute.js",[],"C:\\Users\\josh_\\reactapps\\yt-app\\src\\axios.js",[],"C:\\Users\\josh_\\reactapps\\yt-app\\src\\components\\auth\\ProfileDetails.js",["167"],"import React from 'react'\r\nimport DefaultProfilePhoto from '../../assets/profile-photo.jpg'\r\nimport { useSelector } from 'react-redux';\r\nimport { selectAllUserData } from '../../features/user/userSlice';\r\nfunction ProfileDetails() {\r\n    const { user } = useSelector(selectAllUserData);\r\n    return (\r\n        <div className=\"profile-info\">\r\n            <img src={DefaultProfilePhoto} className=\"profile-photo\" alt=\"profile photo\" />\r\n            <div className=\"profile-details\">\r\n                <span className=\"user-name\">{user ? user.firstname + ' ' + user.lastname : 'Guest' }</span>\r\n                <br />\r\n                <span className=\"user-type\">User</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileDetails\r\n","C:\\Users\\josh_\\reactapps\\yt-app\\src\\features\\error\\errorSlice.js",[],"C:\\Users\\josh_\\reactapps\\yt-app\\src\\components\\PlayReference.js",[],"C:\\Users\\josh_\\reactapps\\yt-app\\src\\components\\misc\\VolumeIndicator.js",[],"C:\\Users\\josh_\\reactapps\\yt-app\\src\\components\\CollectionGrouping.js",[],"C:\\Users\\josh_\\reactapps\\yt-app\\src\\features\\collection\\collectionSlice.js",["168","169"],"import { createSlice } from '@reduxjs/toolkit';\r\nimport axios from '../../axios';\r\nimport { getTokenFromUserReducer } from '../user/userSlice';\r\nimport { getErrors } from '../error/errorSlice';\r\nimport { moveVideo } from '../video/videoSlice';\r\nexport const collectionSlice = createSlice({\r\n    name: 'collection',\r\n    initialState: {\r\n      collections: [],\r\n      isLoading: false\r\n    },\r\n    reducers: {\r\n      add: (state, action) => {\r\n        state.collections.push(action.payload);\r\n      },\r\n      replaceAllCollections: (state, action) => {\r\n        state.collections = action.payload;\r\n        state.isLoading = false;\r\n      },\r\n      removeCollection: (state, action) => {\r\n        state.collections = state.collections.filter(col => col.id !== action.payload.id);\r\n      },\r\n      editCollection: (state, action) => {\r\n        state.collections = state.collections.map(col => {\r\n          if (col.id === action.payload.id)\r\n            return action.payload;\r\n          else\r\n            return col;\r\n        });\r\n      },\r\n      startLoading: state => {\r\n        state.isLoading = true;\r\n      },\r\n      moveVideoInCollection: (state, { payload }) => {\r\n        const { fromCollection, fromIndex, toCollection, toIndex, videoId } = payload;\r\n        const fromColIndex = state.collections.findIndex(col => col.id === fromCollection);\r\n        const vidIndex = state.collections[fromColIndex].videos.findIndex(vid => vid.id === videoId);\r\n        state.collections[fromColIndex].videos[vidIndex].collectionId = toCollection;\r\n        const toColIndex = state.collections.findIndex(col => col.id === toCollection);\r\n        state.collections[toColIndex].videos.splice(\r\n          toIndex, \r\n          0,\r\n          state.collections[fromColIndex].videos.splice(vidIndex, 1)[0]\r\n        );\r\n      }\r\n    },\r\n  });\r\n\r\n\r\n  export const { add, replaceAllCollections, removeCollection, editCollection, startLoading, moveVideoInCollection } = collectionSlice.actions;\r\n\r\n  const headers = (token) => ({\r\n    headers: {\"x-auth-token\": token }\r\n  })\r\n\r\n  export const addCollectionAsync = collection => async (dispatch, getState) => {\r\n      try{\r\n          const savedCollection = await axios.post(\r\n            '/collections/add',\r\n            collection,\r\n            headers(getTokenFromUserReducer(getState))\r\n          ); \r\n        dispatch(add(savedCollection.data));\r\n      }catch (err) {\r\n        console.log(err);\r\n        if(err.response){\r\n          dispatch(getErrors({\r\n            msg: err.response.data,\r\n            status: err.response.status,\r\n            id: null\r\n          }));\r\n        }\r\n      }\r\n  }\r\n\r\n  export const getAllUserCollectionsAsync = () => async (dispatch, getState) => {\r\n    try{\r\n      dispatch(startLoading());\r\n      const userCollections = await axios.get(\r\n        '/collections/usercollections',\r\n        headers(getTokenFromUserReducer(getState))\r\n      ); \r\n      dispatch(replaceAllCollections(userCollections.data));\r\n    }catch (err) {\r\n      console.log(err);\r\n      if(err.response){\r\n        dispatch(getErrors({\r\n          msg: err.response.data,\r\n          status: err.response.status,\r\n          id: null\r\n        }));\r\n      }\r\n    }\r\n  }\r\n\r\n  export const getAllUserCollectionsFullAsync = () => async (dispatch, getState) => {\r\n    try{\r\n      dispatch(startLoading());\r\n      const userCollections = await axios.get(\r\n        '/collections/usercollectionsfull',\r\n        headers(getTokenFromUserReducer(getState))\r\n      ); \r\n      dispatch(replaceAllCollections(userCollections.data));\r\n    }catch (err) {\r\n      console.log(err);\r\n      if(err.response){\r\n        dispatch(getErrors({\r\n          msg: err.response.data,\r\n          status: err.response.status,\r\n          id: null\r\n        }));\r\n      }\r\n    }\r\n  }\r\n\r\n  export const editCollectionAsync = (collectionId, editedCollection) => async (dispatch, getState) => {\r\n    try{\r\n      const updatedCollection = await axios.put(\r\n        '/collections/edit/' + collectionId,\r\n        editedCollection,\r\n        headers(getTokenFromUserReducer(getState))\r\n      ); \r\n      dispatch(editCollection(updatedCollection.data));\r\n    }catch (err) {\r\n      console.log(err);\r\n      if(err.response){\r\n        dispatch(getErrors({\r\n          msg: err.response.data,\r\n          status: err.response.status,\r\n          id: null\r\n        }));\r\n      }\r\n    }\r\n  }\r\n\r\nexport const deleteCollectionAsync = (collectionId) => async (dispatch, getState) => {\r\n  try{\r\n    const updatedCollection = await axios.delete(\r\n      '/collections/delete/' + collectionId,\r\n      headers(getTokenFromUserReducer(getState))\r\n    ); \r\n    dispatch(removeCollection(updatedCollection.data));\r\n  }catch (err) {\r\n    console.log(err);\r\n    if(err.response){\r\n      dispatch(getErrors({\r\n        msg: err.response.data,\r\n        status: err.response.status,\r\n        id: null\r\n      }));\r\n    }\r\n  }\r\n}\r\n\r\nexport const moveVideoAsync = (videoId, payload) => async (dispatch, getState) => {\r\n    try{\r\n\r\n      const updateResult = await axios.put(\r\n        '/collections/move/' + videoId,\r\n        payload,\r\n        headers(getTokenFromUserReducer(getState))\r\n      ); \r\n      payload = {...payload, videoId};\r\n      dispatch(moveVideo(payload));\r\n      dispatch(moveVideoInCollection(payload));\r\n    }catch (err) {\r\n      console.log(err);\r\n      if(err.response){\r\n        dispatch(getErrors({\r\n          msg: err.response.data,\r\n          status: err.response.status,\r\n          id: null\r\n        }));\r\n      }\r\n    }\r\n  }\r\n\r\n  export const selectCollectionData = state => state.collection;\r\n  export default collectionSlice.reducer;","C:\\Users\\josh_\\reactapps\\yt-app\\src\\components\\ManageCollections.js",["170","171"],"import React, { useState ,useEffect } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Spinner } from 'reactstrap';\r\n\r\nimport { \r\n    selectCollectionData, \r\n    getAllUserCollectionsAsync,\r\n    addCollectionAsync,\r\n    editCollectionAsync\r\n} from '../features/collection/collectionSlice';\r\nimport CollectionDetail from './CollectionDetail';\r\n\r\nfunction ManageCollections() {\r\n    const { isLoading, collections } = useSelector(selectCollectionData);\r\n    const dispatch = useDispatch();\r\n    const [newCollection, setNewCollection] = useState({\r\n        name: '',\r\n        color: JSON.stringify({r: '200', g: '200', b: '200', a: '1'})\r\n    });\r\n    const handleSubmitNewCollection = (newCollectionDetails) => {\r\n        dispatch(addCollectionAsync(newCollectionDetails));\r\n    }\r\n    const handleSubmitEditCollection = (collectionId, newCollectionDetails) => {\r\n        dispatch(editCollectionAsync(collectionId, newCollectionDetails));\r\n    }\r\n    \r\n    useEffect(() => {\r\n        dispatch(getAllUserCollectionsAsync());\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <h2 className=\"text-center\">Manage Collections</h2>\r\n            <h3>Add a new Collection</h3>\r\n            <CollectionDetail \r\n                collection={newCollection}\r\n                collections={collections}\r\n                isNewCollection={true}\r\n                handleSubmitCollectionDetail={handleSubmitNewCollection}\r\n            />\r\n            <h3>Existing Collections</h3>\r\n            {collections.map(col => \r\n                <CollectionDetail \r\n                    key={col.id}\r\n                    collection={col}\r\n                    collections={collections}\r\n                    isNewCollection={false}\r\n                    handleSubmitCollectionDetail={handleSubmitEditCollection}\r\n                />\r\n            )}\r\n            {isLoading && <Spinner color=\"secondary\" />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ManageCollections\r\n","C:\\Users\\josh_\\reactapps\\yt-app\\src\\components\\misc\\ToggleableColorPicker.js",[],"C:\\Users\\josh_\\reactapps\\yt-app\\src\\components\\CollectionDetail.js",[],{"ruleId":"172","replacedBy":"173"},{"ruleId":"174","replacedBy":"175"},{"ruleId":"176","severity":1,"message":"177","line":21,"column":6,"nodeType":"178","endLine":21,"endColumn":8,"suggestions":"179"},{"ruleId":"176","severity":1,"message":"180","line":25,"column":5,"nodeType":"181","endLine":25,"endColumn":14,"suggestions":"182"},{"ruleId":"176","severity":1,"message":"183","line":34,"column":5,"nodeType":"181","endLine":34,"endColumn":14,"suggestions":"184"},{"ruleId":"176","severity":1,"message":"185","line":47,"column":8,"nodeType":"178","endLine":47,"endColumn":18,"suggestions":"186"},{"ruleId":"176","severity":1,"message":"177","line":29,"column":8,"nodeType":"178","endLine":29,"endColumn":10,"suggestions":"187"},{"ruleId":"188","severity":1,"message":"189","line":34,"column":17,"nodeType":"181","messageId":"190","endLine":34,"endColumn":31},{"ruleId":"188","severity":1,"message":"191","line":34,"column":33,"nodeType":"181","messageId":"190","endLine":34,"endColumn":42},{"ruleId":"188","severity":1,"message":"192","line":9,"column":8,"nodeType":"181","messageId":"190","endLine":9,"endColumn":19},{"ruleId":"176","severity":1,"message":"193","line":39,"column":7,"nodeType":"178","endLine":39,"endColumn":41,"suggestions":"194"},{"ruleId":"176","severity":1,"message":"177","line":43,"column":7,"nodeType":"178","endLine":43,"endColumn":9,"suggestions":"195"},{"ruleId":"176","severity":1,"message":"193","line":43,"column":7,"nodeType":"178","endLine":43,"endColumn":41,"suggestions":"196"},{"ruleId":"176","severity":1,"message":"177","line":47,"column":7,"nodeType":"178","endLine":47,"endColumn":9,"suggestions":"197"},{"ruleId":"188","severity":1,"message":"198","line":3,"column":21,"nodeType":"181","messageId":"190","endLine":3,"endColumn":32},{"ruleId":"188","severity":1,"message":"199","line":94,"column":13,"nodeType":"181","messageId":"190","endLine":94,"endColumn":24},{"ruleId":"200","severity":1,"message":"201","line":9,"column":13,"nodeType":"202","endLine":9,"endColumn":92},{"ruleId":"188","severity":1,"message":"191","line":35,"column":33,"nodeType":"181","messageId":"190","endLine":35,"endColumn":42},{"ruleId":"188","severity":1,"message":"203","line":158,"column":13,"nodeType":"181","messageId":"190","endLine":158,"endColumn":25},{"ruleId":"188","severity":1,"message":"204","line":16,"column":27,"nodeType":"181","messageId":"190","endLine":16,"endColumn":43},{"ruleId":"176","severity":1,"message":"177","line":29,"column":8,"nodeType":"178","endLine":29,"endColumn":10,"suggestions":"205"},"no-native-reassign",["206"],"no-negated-in-lhs",["207"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["208"],"React Hook useEffect contains a call to 'setVideoDuration'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [] as a second argument to the useEffect Hook.","Identifier",["209"],"React Hook useEffect contains a call to 'setVideoDuration'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [endPoint, value] as a second argument to the useEffect Hook.",["210"],"React Hook useEffect has missing dependencies: 'startPoint', 'video.endSeconds', and 'video.startSeconds'. Either include them or remove the dependency array.",["211"],["212"],"no-unused-vars","'fromCollection' is assigned a value but never used.","unusedVar","'fromIndex' is assigned a value but never used.","'AuthOptions' is defined but never used.","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["213"],["214"],["215"],["216"],"'clearErrors' is defined but never used.","'registerRes' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'updateResult' is assigned a value but never used.","'setNewCollection' is assigned a value but never used.",["217"],"no-global-assign","no-unsafe-negation",{"desc":"218","fix":"219"},{"desc":"220","fix":"221"},{"desc":"222","fix":"223"},{"desc":"224","fix":"225"},{"desc":"218","fix":"226"},{"desc":"227","fix":"228"},{"desc":"218","fix":"229"},{"desc":"227","fix":"230"},{"desc":"218","fix":"231"},{"desc":"218","fix":"232"},"Update the dependencies array to be: [dispatch]",{"range":"233","text":"234"},"Add dependencies array: []",{"range":"235","text":"236"},"Add dependencies array: [endPoint, value]",{"range":"237","text":"238"},"Update the dependencies array to be: [endPoint, startPoint, video.endSeconds, video.startSeconds]",{"range":"239","text":"240"},{"range":"241","text":"234"},"Update the dependencies array to be: [msg, status, id, isAuthenticated, history]",{"range":"242","text":"243"},{"range":"244","text":"234"},{"range":"245","text":"243"},{"range":"246","text":"234"},{"range":"247","text":"234"},[926,928],"[dispatch]",[960,960],", []",[1481,1481],", [endPoint, value]",[1734,1744],"[endPoint, startPoint, video.endSeconds, video.startSeconds]",[878,880],[1234,1268],"[msg, status, id, isAuthenticated, history]",[1344,1346],[1519,1553],[1629,1631],[1062,1064]]